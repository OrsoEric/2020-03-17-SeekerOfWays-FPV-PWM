/**********************************************************************************
**	ENVIROMENT VARIABILE
**********************************************************************************/

#ifndef CTRL_PWM_H_
	#define CTRL_PWM_H_

/**********************************************************************************
**	GLOBAL INCLUDES
**********************************************************************************/

/**********************************************************************************
**	DEFINES
**********************************************************************************/

//Number of PWM channels to be controlled
#define NUM_CTRL_PWM		4

/**********************************************************************************
**	MACROS
**********************************************************************************/

/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

//! @namespace User My custom namespace
namespace Orangebot
{

/**********************************************************************************
**	TYPEDEFS
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: STRUCTURES
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: GLOBAL VARIABILES
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: CLASS
**********************************************************************************/

/************************************************************************************/
//! @class 		Dummy
/************************************************************************************/
//!	@author		Orso Eric
//! @version	0.1 alpha
//! @date		2019/05
//! @brief		Dummy Library
//! @details
//!	Verbose description \n
//! xxx
//! @pre		No prerequisites
//! @bug		None
//! @warning	No warnings
//! @copyright	License ?
//! @todo		todo list
/************************************************************************************/

class Ctrl_pwm
{
	//Visible to all
	public:
		//--------------------------------------------------------------------------
		//	CONSTRUCTORS
		//--------------------------------------------------------------------------

		//! Default constructor
		Ctrl_pwm( void );
		//! Initialized constructor
		Ctrl_pwm( uint16_t max, uint16_t slope );

		//--------------------------------------------------------------------------
		//	DESTRUCTORS
		//--------------------------------------------------------------------------

		//!Default destructor
		~Ctrl_pwm( void );

		//--------------------------------------------------------------------------
		//	OPERATORS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	SETTERS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	GETTERS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	REFERENCES
		//--------------------------------------------------------------------------

		//Reference to current PWM
		int16_t &pwm( uint8_t index );
		//Refeence to target PWM
		int16_t &target( uint8_t index );

		//--------------------------------------------------------------------------
		//	TESTERS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	PUBLIC METHODS
		//--------------------------------------------------------------------------

		//Reset the PWM controller
		bool reset( void );
		//Execute a tick in the PWM control system. Automatically call the user provided PWM HAL routine
		bool update( void );
		//Register a user provided PWM HAL to interface with the hardware that executes the PWM setting
		//bool register_pwm_handler( void );

		//--------------------------------------------------------------------------
		//	PUBLIC STATIC METHODS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	PUBLIC VARS
		//--------------------------------------------------------------------------

	//Visible to derived classes
	protected:
		//--------------------------------------------------------------------------
		//	PROTECTED METHODS
		//--------------------------------------------------------------------------

		//--------------------------------------------------------------------------
		//	PROTECTED VARS
		//--------------------------------------------------------------------------

	//Visible only inside the class
	private:
		//--------------------------------------------------------------------------
		//	PRIVATE METHODS
		//--------------------------------------------------------------------------

		//Initialize class variables
		bool init_vars( void );
		//Initialized initialize of class variables
		bool init_vars( uint16_t max, uint16_t slope );

		//! dummy method for easy copy
		bool dummy( void );

		//--------------------------------------------------------------------------
		//	PRIVATE VARS
		//--------------------------------------------------------------------------

		//Actual PWM being executed
		int16_t g_pwm[ NUM_CTRL_PWM ];
		//Target PWM
		int16_t g_pwm_target[ NUM_CTRL_PWM ];
		//PWM limits
		uint16_t g_pwm_max[ NUM_CTRL_PWM ];
		//Maximum PWM slope allowed per execution tick
		uint16_t g_pwm_slope[ NUM_CTRL_PWM ];

};	//End Class: Ctrl_pwm

/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

} //End Namespace

#else
    #warning "Multiple inclusion of hader file"
#endif
