/****************************************************************************
**	OrangeBot Project
*****************************************************************************
**        /
**       /
**      /
** ______ \
**         \
**          \
*****************************************************************************
**
*****************************************************************************
**	Author: 			Orso Eric
**	Creation Date:
**	Last Edit Date:
**	Revision:			1
**	Version:			0.1 ALFA
****************************************************************************/

/****************************************************************************
**	HYSTORY VERSION
*****************************************************************************
**		2020-01-03
**
****************************************************************************/

/****************************************************************************
**	DESCRIPTION
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	KNOWN BUG
*****************************************************************************
**
****************************************************************************/

/****************************************************************************
**	INCLUDES
****************************************************************************/

//Fixed width type
#include <stdint.h>
//Microcontroller macros
#include "at_utils.h"
//Debug macros
#include "debug.h"
//Class Header
#include "ctrl_pwm.h"

/****************************************************************************
**	NAMESPACES
****************************************************************************/

namespace Orangebot
{

/****************************************************************************
**	GLOBAL VARIABILES
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	CONSTRUCTORS
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Empty Constructor
//!	Ctrl_pwm | void
/***************************************************************************/
// @param
//! @return no return
//!	@details
//! Empty constructor
/***************************************************************************/

Ctrl_pwm::Ctrl_pwm( void )
{
	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return;	//OK
}	//end constructor:

/***************************************************************************/
//!	@brief Initialized Constructor
//!	Ctrl_pwm | int16_t min, int16_t max, uint16_t slope
/***************************************************************************/
// @param
//! @return no return
//!	@details
//! Initialized constructor
/***************************************************************************/

Ctrl_pwm::Ctrl_pwm( uint16_t max, uint16_t slope )
{
	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Initialize class variables
	this -> init_vars( max, slope );

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return;	//OK
}	//end constructor:

/****************************************************************************
*****************************************************************************
**	DESTRUCTORS
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Empty Destructor
//!	Dummy | void
/***************************************************************************/
// @param
//! @return no return
//!	@details
//! Empty destructor
/***************************************************************************/

Ctrl_pwm::~Ctrl_pwm( void )
{
	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return;	//OK
}	//end destructor:

/****************************************************************************
*****************************************************************************
**	OPERATORS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	SETTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	GETTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	REFERENCES
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Reference Operator
//!	pwm | uint8_t
/***************************************************************************/
//! @return int16_t |
//!	@details
//!	Set the gain of the gain of the PID
/***************************************************************************/

int16_t &Ctrl_pwm::pwm( uint8_t index )
{
	//--------------------------------------------------------------------------
	//	RETURN
	//--------------------------------------------------------------------------

	return this -> g_pwm[ index ];
}	//end reference: pwm | uint8_t

/***************************************************************************/
//!	@brief Reference Operator
//!	target | uint8_t
/***************************************************************************/
//! @return int16_t |
//!	@details
//!	Set the gain of the gain of the PID
/***************************************************************************/

int16_t &Ctrl_pwm::target( uint8_t index )
{
	//--------------------------------------------------------------------------
	//	RETURN
	//--------------------------------------------------------------------------

	return this -> g_pwm_target[ index ];
}	//end reference: target | uint8_t

/****************************************************************************
*****************************************************************************
**	TESTERS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	PUBLIC METHODS
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Public Method
//!	reset | void
/***************************************************************************/
//! @return bool | false = OK
//!	@details
//! Reset PWM target and actual for all channels to zero
/***************************************************************************/

inline bool Ctrl_pwm::reset( void )
{
	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	//Counter
	uint8_t t;

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//For: every PWM channel
	for (t = 0;t < NUM_CTRL_PWM;t++)
	{
		//Initialize
		this -> g_pwm[t] = 0;
		this -> g_pwm_target[t] = 0;
	} //End for: every PWM channel

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
}	//end method: reset | void

/***************************************************************************/
//!	@brief Public Method
//!	update | void
/***************************************************************************/
//! @return bool | false = OK
//!	@details
//! Update all PWM channels
//! pwm tries to reach the target while complying with slope and max
//! PWM must pass from zero in the event of a change in direction. Change of direction is stressful for a driver
/***************************************************************************/

bool Ctrl_pwm::update( void )
{
	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	//Counter
	uint8_t t;
	//Difference
	int16_t diff, actual, target, slope, max;

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//For: every PWM channel
	for (t = 0;t < NUM_CTRL_PWM;t++)
	{
		//Fetch
		actual = this -> g_pwm[t];
		target = this -> g_pwm_target[t];
		slope = this -> g_pwm_slope[t];
		max = this -> g_pwm_max[t];
		//DPRINT("actual: %5d | target: %5d | slope: %5d | max: %5d | ", actual, target, slope, max);
		//Compute difference
		diff = target -actual;
		//Clip difference
		diff = AT_SAT( diff, slope, -slope );
		//Apply difference
		target = AT_SAT_SUM( actual, diff, max, -max );
		//DPRINT_NOTAB("diff: %5d | target result: %5d |\n", diff, target);
		//If new reading and old reading are different in sign, force a zero
		actual = ((target >= 0) && (actual >= 0)) || ((target <= 0) && (actual <= 0))?(target):(0);
		//Write back
		this -> g_pwm[t] = actual;
	} //End for: every PWM channel

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
}	//end method: update | void

/****************************************************************************
*****************************************************************************
**	PUBLIC STATIC METHODS
*****************************************************************************
****************************************************************************/

/****************************************************************************
*****************************************************************************
**	PRIVATE METHODS
*****************************************************************************
****************************************************************************/

/***************************************************************************/
//!	@brief Private Method
//!	init_vars | void
/***************************************************************************/
//! @return bool
//!	@details
//! Initialize class vars
/***************************************************************************/

inline bool Ctrl_pwm::init_vars( void )
{
	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	//Counter
	uint8_t t;

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//For: every PWM channel
	for (t = 0;t < NUM_CTRL_PWM;t++)
	{
		//Initialize
		this -> g_pwm[t] = 0;
		this -> g_pwm_target[t] = 0;
		this -> g_pwm_max[t] = UINT16_MAX;
		this -> g_pwm_slope[t] = UINT16_MAX;

	} //End for: every PWM channel

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
}	//end method: init_vars | void

/***************************************************************************/
//!	@brief Private Method
//!	init_vars | int16_t | int16_t | uint16_t |
/***************************************************************************/
//! @return bool
//!	@details
//! Initialize class vars
/***************************************************************************/

inline bool Ctrl_pwm::init_vars( uint16_t max, uint16_t slope )
{
	//Trace Enter
	DENTER();

	///--------------------------------------------------------------------------
	///	VARS
	///--------------------------------------------------------------------------

	//Counter
	uint8_t t;

	///--------------------------------------------------------------------------
	///	INIT
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//For: every PWM channel
	for (t = 0;t < NUM_CTRL_PWM;t++)
	{
		//Initialize
		this -> g_pwm[t] = 0;
		this -> g_pwm_target[t] = 0;
		this -> g_pwm_max[t] = max;
		this -> g_pwm_slope[t] = slope;

	} //End for: every PWM channel

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
}	//end method: init_vars | void

/****************************************************************************
**	NAMESPACES
****************************************************************************/

} //End Namespace
