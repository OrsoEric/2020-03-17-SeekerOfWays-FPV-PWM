/****************************************************************************
**	INCLUDE
****************************************************************************/

//type definition using the bit width and signedness
#include <stdint.h>
//define the ISR routune, ISR vector, and the sei() cli() function
#include <avr/interrupt.h>
//name all the register and bit
#include <avr/io.h>
//General purpose macros
#include "at_utils.h"
//ATMEGA PORT macros definitions
#include "at_mega_port.h"
//Program wide definitions
#include "global.h"
//Servo class
#include "servo.h"

/****************************************************************************
**	NAMESPACES
****************************************************************************/

/****************************************************************************
**	GLOBAL VARS
****************************************************************************/

//Servo motors
Orangebot::Servo g_servos;

/****************************************************************************
**	FUNCTION
****************************************************************************/

/***************************************************************************/
//!	@brief function
//!	init_servo | void
/***************************************************************************/
//! @return void |
//! @details
/***************************************************************************/

void init_servo( void )
{
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Initialize Servo class
	g_servos = Orangebot::Servo();
	//Register HAL Driver for the servomotors PWM channel
	g_servos.register_pwm_handler( servo_pwm );
	//If: class is in error
	if (g_servos.is_invalid())
	{
		//Report the error code
		report_error( Error_code::ERR_SERVOS );
	}

	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return;
}	//End function: init_servo | void

/***************************************************************************/
//!	@brief function
//!	servo_exe | void
/***************************************************************************/
//! @return void |
//! @details
//! Compute Servomotors PWM
/***************************************************************************/

void servo_exe( void )
{
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Execute a step in the servo generator
	g_servos.exe();

	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return;
}	//End function: servo_exe | void

/****************************************************************************
**	@brief HAL Driver
**	servo_pwm | uint8_t, int16_t *
****************************************************************************/
//! @param f bool
//! @return bool |
//! @details
//! HAL Driver
//! function that sets the PWM settings for all servos
/***************************************************************************/

void servo_pwm( uint8_t num_servos, uint16_t *pwm )
{
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//Redundant check for number of servo channels
	if (num_servos > NUM_SERVOS)
	{
		return; //Fail
	}

	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------
	
	//!@todo install servo motors
	//Set all PWM signals
	/*
	TCA0.SINGLE.CMP0 = pwm[ 0 ];
	TCA0.SINGLE.CMP1 = pwm[ 1 ];
	TCA0.SINGLE.CMP2 = pwm[ 2 ];
	*/

	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	return;
}	//end HAL Driver: servo_pwm | uint8_t, int16_t *

/****************************************************************************
**	@brief HAL Driver
**	set_servo_pos | int8_t *
****************************************************************************/
//! @param f bool
//! @return bool |
//! @details
//! HAL Driver
//! Set the target position for the servo controller. Tries to rest servo controller in case of error.
/***************************************************************************/

void set_servo_pos( int8_t *target_pos )
{
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//Counter
	uint8_t t;

	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//For: every servo
	for (t = 0;t < NUM_SERVOS;t++)
	{
		//Move to target set point at the default speed 
		g_servos.move( t, target_pos[t], SERVO_SPD );
	}

	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	return;
}	//end HAL Driver: set_servo_pos | int8_t *